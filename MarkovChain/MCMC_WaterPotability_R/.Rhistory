beta[1:10] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
View(water)
setwd("C:/_Daten/00_Informatik/my_Git_pre/Bayes/BayesianDataAnalysis_WaterPotability")
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,3,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
solids <- water$Solids
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
trihalomethanes <- water$Trihalomethanes
turbidity <- water$Turbidity
N <- length(potability)
beta.mu <- c(0,0,0,0,0,0,0,0,0,0)
beta.prec <- diag(10) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness", "solids", "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * solids[i]
+ beta[5] * chloramines[i]
+ beta[6] * sulfate[i]
+ beta[7] * conductivity[i]
+ beta[8] * organic_carbon[i]
+ beta[9] * trihalomethanes[i]
+ beta[10] * turbidity[i]
## replace missing values with simulated data (distribution: mean +- std)
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:10] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
setwd("C:/_Daten/00_Informatik/my_Git_pre/Bayes/BayesianDataAnalysis_WaterPotability")
library(R2jags)
library(rjags)
library(coda)
library(lattice)
setwd("C:/_Daten/00_Informatik/my_Git_pre/Bayes/BayesianDataAnalysis_WaterPotability")
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
trihalomethanes <- water$Trihalomethanes
turbidity <- water$Turbidity
N <- length(potability)
beta.mu <- c(0,0,0,0,0,0,0,0,0)
beta.prec <- diag(9) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness",  "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
## replace missing values with simulated data (distribution: mean +- std)
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
install.packages("swirl")
library(swirl)
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
trihalomethanes <- water$Trihalomethanes
turbidity <- water$Turbidity
N <- length(potability)
beta.mu <- c(0,0,0,0,0,0,0,0,0)
beta.prec <- diag(9) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness", "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
trihalomethanes <- water$Trihalomethanes
turbidity <- water$Turbidity
N <- length(potability)
beta.mu <- c(0,0,0,0,0,0,0,0,0)
beta.prec <- diag(9) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness", "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
setwd("C:/_Daten/00_HSLU/1_NER/InstructionMaterial/CodeAndData")
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
trihalomethanes <- water$Trihalomethanes
turbidity <- water$Turbidity
N <- length(potability)
beta.mu <- c(0,0,0,0,0,0,0,0,0)
beta.prec <- diag(9) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness", "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
set.seed(1234)
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
setwd("C:/_Daten/00_Informatik/myGit/DataScience/Bayes_MarkovChain/MCMC_WaterPotability_R")
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
turbidity <- water$Turbidity
N <- length(potability)
trihalomethanes <- water$Trihalomethanes
beta.mu <- c(0,0,0,0,0,0,0,0,0)
beta.prec <- diag(9) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness", "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
set.seed(121)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
install.packages(MatchIt)
install.packages(lfe)
# install.packages("swirl")
install.packages("MatchIt")
install.packages("Synth")
install.packages("lfe")
library(R2jags)
library(rjags)
library(coda)
library(lattice)
##### Read data
water <- read.csv("water_potability.csv")
water <- subset(water, select=c(10,1,2,4,5,6,7,8,9))
dim(water)
##### Show columns that contain NAs (2 possibilities)
colnames(water)[colSums(is.na(water)) > 0]
##### Assign data
potability <- water$Potability
pH <- water$ph
hardness <- water$Hardness
chloramines <- water$Chloramines
sulfate <- water$Sulfate
conductivity <- water$Conductivity
organic_carbon <- water$Organic_carbon
trihalomethanes <- water$Trihalomethanes
turbidity <- water$Turbidity
N <- length(potability)
beta.mu <- c(0,0,0,0,0,0,0,0,0)
beta.prec <- diag(9) * 0.01
##### Evaluate mean and sd values for the columns that contain NAs
pH_vals <- c(mean(na.omit(pH)), sd(na.omit(pH)))
sulfate_vals <- c(mean(na.omit(sulfate)), sd(na.omit(sulfate)))
trihalomethanes_vals <- c(mean(na.omit(trihalomethanes)), sd(na.omit(trihalomethanes)))
##### Assign parameters for the model
to.dat <- list("N", "potability", "pH", "hardness", "chloramines", "sulfate",
"conductivity", "organic_carbon", "trihalomethanes", "turbidity",
"pH_vals", "sulfate_vals", "trihalomethanes_vals",
"beta.mu", "beta.prec")
##### Define model
mod <- function(){
## Sampling density
for (i in 1:N){
potability[i] ~ dbern(p[i])   # Bernouille distribution --> binary outcome
logit(p[i]) <- mu[i]          # logit link
mu[i] <-  beta[1]
+ beta[2] * pH[i]
+ beta[3] * hardness[i]
+ beta[4] * chloramines[i]
+ beta[5] * sulfate[i]
+ beta[6] * conductivity[i]
+ beta[7] * organic_carbon[i]
+ beta[8] * trihalomethanes[i]
+ beta[9] * turbidity[i]
pH[i] ~ dnorm(pH_vals[1], pH_vals[2])
sulfate[i] ~ dnorm(sulfate_vals[1], sulfate_vals[2])
trihalomethanes[i] ~ dnorm(trihalomethanes_vals[1], trihalomethanes_vals[2])
}
## Prior density
beta[1:9] ~ dmnorm(beta.mu, beta.prec)
}
##### Define starting values and params to be monitored for JAGS
inits1 <- list("b"=c(1,1,1,1,1,1,1,1,1))
inits2 <- list("b"=c(-1,-1,-1,-1,-1,-1,-1,-1,-1))
inits_list <- list(inits1, inits2)
params <- c("beta")
##### Posterior (Run sampler)
set.seed(121)
turnout.fit <- jags(data=to.dat, inits=inits_list, parameters.to.save=params, model.file=mod, n.chains=2, n.iter=10000, n.burnin=1000)
print(turnout.fit)
